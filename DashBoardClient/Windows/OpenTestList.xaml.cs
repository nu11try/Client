using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace DashBoardClient
{
    /// <summary>
    /// Логика взаимодействия для Window2.xaml
    /// </summary>
    /// 
    public class Tests
    {
        public bool Select { get; set; }
        // ID-шник теста
        public string ID { get; set; }
        // Первончальное имя теста
        public string NewName { get; set; }
        // Ответственный за выполнение
        public string Executor { get; set; }
        // Время выполнения
        public string Time { get; set; }
        // Результат
        public string Result { get; set; }
        public string ResultExec { get; set; }
        public string TimeExec { get; set; }
        public string Date { get; set; }
    }

    public partial class OpenTestList : Window
    {
        List<Tests> list;
        string response = "";
        string[] testsList;
        readonly ServerConnect server = new ServerConnect();
        string id;
        BackgroundWorker bw;
        public OpenTestList(string ID)
        {
            InitializeComponent();

            id = ID;
            bw = new BackgroundWorker();
            bw.DoWork += (obj, ea) => {
                UpdateList();
            };
            bw.RunWorkerAsync();
            bw.RunWorkerCompleted += (obj, ea) => {

                wait.Opacity = 0;
                TestsList.ItemsSource = list;
            };
        }
        private void UpdateList()
        {
            Data.TestsSelectedForStart = "sss";
            list = new List<Tests>();
            try
            {
                Message mess = new Message();
                mess.Add(id);
                response = server.SendMsg("GetTestsThisPack", Data.ServiceSel, JsonConvert.SerializeObject(mess));
                mess = JsonConvert.DeserializeObject<Message>(response);

                for (var i = 0; i < mess.args.Count; i += 10)
                {
                    Tests test = new Tests();
                    test.ID = mess.args[i];
                    test.NewName = mess.args[i + 1];
                    test.TimeExec = mess.args[i + 7];
                    if (mess.args[i + 8] == "Passed") test.ResultExec = "/DashBoardClient;component/Images/ok.png";
                    if (mess.args[i + 8] == "Failed") test.ResultExec = "/DashBoardClient;component/Images/bug.png";
                    if (mess.args[i + 8] == "Нет данных") test.ResultExec = "/DashBoardClient;component/Images/dependon_no_version.png";
                    test.Date = mess.args[i + 9];
                    list.Add(test);
                }
            }
            catch { MessageBox.Show("Произошла ошибка! Обратитесь к поддержке!"); }



        }
        private void ShowResult(object sender, RoutedEventArgs e)
        {

            try
            {
                Message mess = new Message();
                mess.Add(Data.ServiceSel);
                response = server.SendMsg("GetPathToResult", Data.ServiceSel, JsonConvert.SerializeObject(mess));
                mess = JsonConvert.DeserializeObject<Message>(response);
              
                System.Diagnostics.Process.Start("file://pur-test01/ATST/" + mess.args[0].Replace("Z:\\\\", "").Replace("\\\\", "/") + "/" + (sender as Button).Tag.ToString() + "/Res1/Report/run_results.html");

            }
            catch
            {

                MessageBox.Show("Нет результата по тесту!");
            }
        }

        private void BtnStartPack_Click(object sender, RoutedEventArgs e)
        {
            Message message = new Message();
            message.Add("no_pack");
            message.Add(id);
            foreach (Tests listItem in TestsList.SelectedItems) message.Add(listItem.ID);
            string request = JsonConvert.SerializeObject(message);
            response = server.SendMsg("StartTests", Data.ServiceSel, request);
            if (JsonConvert.DeserializeObject<Message>(response).args[0] == "OK") MessageBox.Show("Набор отправлен на запуск!");
            if (JsonConvert.DeserializeObject<Message>(response).args[0] == "ERROR") MessageBox.Show("Произошла ошибка запуска!");
            if (JsonConvert.DeserializeObject<Message>(response).args[0] == "START") MessageBox.Show("Набор находится в режиме запуска!");
        }

        private void StopTests(object sender, RoutedEventArgs e)
        {
            Message message = new Message();

            message.Add(id);
            if (message.args.Count != 0)
            {
                string request = JsonConvert.SerializeObject(message);
                response = server.SendMsg("StopTests", Data.ServiceSel, request);
                if (JsonConvert.DeserializeObject<Message>(response).args[0] == "OK") MessageBox.Show("Набор отправлен на остановку!");
                if (JsonConvert.DeserializeObject<Message>(response).args[0] == "ERROR") MessageBox.Show("Произошла ошибка остановки!");
                if (JsonConvert.DeserializeObject<Message>(response).args[0] == "NO_START") MessageBox.Show("Один из выбранных наборов не находится в режиме запуска!");
            }
            else MessageBox.Show("Не выбрано ни одного набора!");
        }
    }
}
